import ArgumentType from '../arguments/ArgumentType';
import Command from '../Command';
import CommandContext from '../context/CommandContext';
import CommandContextBuilder from '../context/CommandContextBuilder';
import CommandNode from './CommandNode';
import Predicate from '../Predicate';
import RedirectModifier from '../RedirectModifier';
import RequiredArgumentBuilder from '../builder/RequiredArgumentBuilder';
import StringReader from '../StringReader';
import SuggestionProvider from '../suggestion/SuggestionProvider';
import Suggestions from '../suggestion/Suggestions';
import SuggestionsBuilder from '../suggestion/SuggestionsBuilder';
export default class ArgumentCommandNode<S, T> extends CommandNode<S> {
    private name;
    private type;
    private customSuggestions;
    constructor(name: string, type: ArgumentType<T>, command: Command<S>, requirement: Predicate<S>, redirect: CommandNode<S>, modifier: RedirectModifier<S>, forks: boolean, customSuggestions: SuggestionProvider<S>);
    getNodeType(): string;
    getType(): ArgumentType<T>;
    getName(): string;
    getUsageText(): string;
    getCustomSuggestions(): SuggestionProvider<S>;
    parse(reader: StringReader, contextBuilder: CommandContextBuilder<S>): void;
    listSuggestions(context: CommandContext<S>, builder: SuggestionsBuilder): Promise<Suggestions>;
    createBuilder(): RequiredArgumentBuilder<S, T>;
    isValidInput(input: string, context: any): boolean;
    equals(o: object): boolean;
    getSortedKey(): string;
    getExamples(): Iterable<string>;
    toString(): string;
}
