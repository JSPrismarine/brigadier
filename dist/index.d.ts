export * as CommandDispatcher from "./lib/CommandDispatcher";
export * as LiteralMessage from "./lib/LiteralMessage";
export * as ParseResults from "./lib/ParseResults";
export * as StringReader from "./lib/StringReader";
export { DefaultType } from "./lib/arguments/ArgumentType";
export * as LiteralArgumentBuilder from "./lib/builder/LiteralArgumentBuilder";
export { literal } from "./lib/builder/LiteralArgumentBuilder";
export * as RequiredArgumentBuilder from "./lib/builder/RequiredArgumentBuilder";
export { argument } from "./lib/builder/RequiredArgumentBuilder";
export * as CommandContext from "./lib/context/CommandContext";
export * as CommandContextBuilder from "./lib/context/CommandContextBuilder";
export * as ParsedArgument from "./lib/context/ParsedArgument";
export * as ParsedCommandNode from "./lib/context/ParsedCommandNode";
export * as StringRange from "./lib/context/StringRange";
export * as SuggestionsContext from "./lib/context/SuggestionContext";
export * as CommandSyntaxException from "./lib/exceptions/CommandSyntaxException";
export * as DynamicCommandExceptionType from "./lib/exceptions/DynamicCommandExceptionType";
export * as SimpleCommandExceptionType from "./lib/exceptions/SimpleCommandExceptionType";
export * as Suggestion from "./lib/suggestion/Suggestion";
export * as Suggestions from "./lib/suggestion/Suggestions";
export * as SuggestionsBuilder from "./lib/suggestion/SuggestionsBuilder";
export * as ArgumentCommandNode from "./lib/tree/ArgumentCommandNode";
export * as LiteralCommandNode from "./lib/tree/LiteralCommandNode";
export * as RootCommandNode from "./lib/tree/RootCommandNode";
export declare const word: typeof import("./lib/arguments/StringArgumentType").default.word, string: typeof import("./lib/arguments/StringArgumentType").default.string, greedyString: typeof import("./lib/arguments/StringArgumentType").default.greedyString, bool: typeof import("./lib/arguments/BoolArgumentType").default.bool, integer: typeof import("./lib/arguments/IntegerArgumentType").default.integer, float: typeof import("./lib/arguments/FloatArgumentType").default.float;
