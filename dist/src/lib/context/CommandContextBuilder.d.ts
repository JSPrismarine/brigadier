import Command from "../Command";
import StringRange from "./StringRange";
import CommandNode from "../tree/CommandNode";
import CommandContext from "./CommandContext";
import ParsedArgument from "./ParsedArgument";
import SuggestionContext from "./SuggestionContext";
import ParsedCommandNode from "./ParsedCommandNode";
import CommandDispatcher from "../CommandDispatcher";
export default class CommandContextBuilder<S> {
    private args;
    private rootNode;
    private nodes;
    private dispatcher;
    private source;
    private command;
    private child;
    private range;
    private modifier;
    private forks;
    constructor(dispatcher: CommandDispatcher<S>, source: S, rootNode: CommandNode<S>, start: number);
    withSource(source: S): CommandContextBuilder<S>;
    getSource(): S;
    getRootNode(): CommandNode<S>;
    withArgument(name: String, argument: ParsedArgument<S, any>): CommandContextBuilder<S>;
    getArguments(): Map<String, ParsedArgument<S, any>>;
    withCommand(command: Command<S>): CommandContextBuilder<S>;
    withNode(node: CommandNode<S>, range: StringRange): CommandContextBuilder<S>;
    copy(): CommandContextBuilder<S>;
    withChild(child: CommandContextBuilder<S>): CommandContextBuilder<S>;
    getChild(): CommandContextBuilder<S>;
    getLastChild(): CommandContextBuilder<S>;
    getCommand(): Command<S>;
    getNodes(): Array<ParsedCommandNode<S>>;
    build(input: string): CommandContext<S>;
    getDispatcher(): CommandDispatcher<S>;
    getRange(): StringRange;
    findSuggestionContext(cursor: number): SuggestionContext<S>;
}
