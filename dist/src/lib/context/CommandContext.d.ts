import Command from "../Command";
import RedirectModifier from "../RedirectModifier";
import CommandNode from "../tree/CommandNode";
import StringRange from "./StringRange";
import ParsedArgument from "./ParsedArgument";
import ParsedCommandNode from "./ParsedCommandNode";
export default class CommandContext<S> {
    private source;
    private input;
    private command;
    private args;
    private rootNode;
    private nodes;
    private range;
    private child;
    private modifier;
    private forks;
    constructor(source: S, input: string, args: Map<String, ParsedArgument<S, any>>, command: Command<S>, rootNode: CommandNode<S>, nodes: Array<ParsedCommandNode<S>>, range: StringRange, child: CommandContext<S>, modifier: RedirectModifier<S>, forks: boolean);
    copyFor(source: S): CommandContext<S>;
    getChild(): CommandContext<S>;
    getLastChild(): CommandContext<S>;
    getCommand(): Command<S>;
    getSource(): S;
    getArgument(name: string, clazz?: Function): any;
    equals(o: object): boolean;
    getRedirectModifier(): RedirectModifier<S>;
    getRange(): StringRange;
    getInput(): string;
    getRootNode(): CommandNode<S>;
    getNodes(): Array<ParsedCommandNode<S>>;
    hasNodes(): boolean;
    isForked(): boolean;
}
